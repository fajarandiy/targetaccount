// Code generated by MockGen. DO NOT EDIT.
// Source: com.example/targetaccount/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "com.example/targetaccount/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateTargetAccount mocks base method.
func (m *MockStore) CreateTargetAccount(arg0 context.Context, arg1 db.CreateTargetAccountParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTargetAccount", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTargetAccount indicates an expected call of CreateTargetAccount.
func (mr *MockStoreMockRecorder) CreateTargetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTargetAccount", reflect.TypeOf((*MockStore)(nil).CreateTargetAccount), arg0, arg1)
}

// DeleteTargetAccount mocks base method.
func (m *MockStore) DeleteTargetAccount(arg0 context.Context, arg1 db.DeleteTargetAccountParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTargetAccount", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTargetAccount indicates an expected call of DeleteTargetAccount.
func (mr *MockStoreMockRecorder) DeleteTargetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTargetAccount", reflect.TypeOf((*MockStore)(nil).DeleteTargetAccount), arg0, arg1)
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(arg0 context.Context, arg1 func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), arg0, arg1)
}

// GetTargetAccount mocks base method.
func (m *MockStore) GetTargetAccount(arg0 context.Context, arg1 int64) (db.TargetAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetAccount", arg0, arg1)
	ret0, _ := ret[0].(db.TargetAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetAccount indicates an expected call of GetTargetAccount.
func (mr *MockStoreMockRecorder) GetTargetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetAccount", reflect.TypeOf((*MockStore)(nil).GetTargetAccount), arg0, arg1)
}

// GetTargetAccountForUpdate mocks base method.
func (m *MockStore) GetTargetAccountForUpdate(arg0 context.Context, arg1 int64) (db.TargetAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargetAccountForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.TargetAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargetAccountForUpdate indicates an expected call of GetTargetAccountForUpdate.
func (mr *MockStoreMockRecorder) GetTargetAccountForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargetAccountForUpdate", reflect.TypeOf((*MockStore)(nil).GetTargetAccountForUpdate), arg0, arg1)
}

// ListTargetAccount mocks base method.
func (m *MockStore) ListTargetAccount(arg0 context.Context, arg1 db.ListTargetAccountParams) ([]db.TargetAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTargetAccount", arg0, arg1)
	ret0, _ := ret[0].([]db.TargetAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetAccount indicates an expected call of ListTargetAccount.
func (mr *MockStoreMockRecorder) ListTargetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetAccount", reflect.TypeOf((*MockStore)(nil).ListTargetAccount), arg0, arg1)
}

// UpdateTargetAccount mocks base method.
func (m *MockStore) UpdateTargetAccount(arg0 context.Context, arg1 db.UpdateTargetAccountParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetAccount", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetAccount indicates an expected call of UpdateTargetAccount.
func (mr *MockStoreMockRecorder) UpdateTargetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetAccount", reflect.TypeOf((*MockStore)(nil).UpdateTargetAccount), arg0, arg1)
}
