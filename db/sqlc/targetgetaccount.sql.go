// Code generated by sqlc. DO NOT EDIT.
// source: targetgetaccount.sql

package db

import (
	"context"
	"database/sql"
)

const createTargetAccount = `-- name: CreateTargetAccount :execresult
INSERT INTO target_account (
    name,
    atm_bank_code,
    bank_detail,
    account_type,
    account_number,
    bank,
    bank_branch,
    description,
    target_type,
    status,
    fourth_digit,
    customer_id,
    currency,
    account_type_code,
    amount,
    is_favorite 
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateTargetAccountParams struct {
	Name            sql.NullString `json:"name"`
	AtmBankCode     sql.NullString `json:"atm_bank_code"`
	BankDetail      sql.NullInt64  `json:"bank_detail"`
	AccountType     string         `json:"account_type"`
	AccountNumber   sql.NullString `json:"account_number"`
	Bank            string         `json:"bank"`
	BankBranch      sql.NullString `json:"bank_branch"`
	Description     sql.NullString `json:"description"`
	TargetType      int64          `json:"target_type"`
	Status          int64          `json:"status"`
	FourthDigit     sql.NullString `json:"fourth_digit"`
	CustomerID      int64          `json:"customer_id"`
	Currency        sql.NullString `json:"currency"`
	AccountTypeCode sql.NullString `json:"account_type_code"`
	Amount          sql.NullString `json:"amount"`
	IsFavorite      sql.NullString `json:"is_favorite"`
}

func (q *Queries) CreateTargetAccount(ctx context.Context, arg CreateTargetAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTargetAccount,
		arg.Name,
		arg.AtmBankCode,
		arg.BankDetail,
		arg.AccountType,
		arg.AccountNumber,
		arg.Bank,
		arg.BankBranch,
		arg.Description,
		arg.TargetType,
		arg.Status,
		arg.FourthDigit,
		arg.CustomerID,
		arg.Currency,
		arg.AccountTypeCode,
		arg.Amount,
		arg.IsFavorite,
	)
}

const deleteTargetAccount = `-- name: DeleteTargetAccount :execresult
UPDATE target_account
SET status = ?
WHERE id = ?
`

type DeleteTargetAccountParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) DeleteTargetAccount(ctx context.Context, arg DeleteTargetAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTargetAccount, arg.Status, arg.ID)
}

const getTargetAccount = `-- name: GetTargetAccount :one
SELECT id, name, atm_bank_code, bank_detail, account_type, account_number, bank, bank_branch, description, target_type, status, fourth_digit, customer_id, currency, account_type_code, amount, is_favorite FROM target_account
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTargetAccount(ctx context.Context, id int64) (TargetAccount, error) {
	row := q.db.QueryRowContext(ctx, getTargetAccount, id)
	var i TargetAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AtmBankCode,
		&i.BankDetail,
		&i.AccountType,
		&i.AccountNumber,
		&i.Bank,
		&i.BankBranch,
		&i.Description,
		&i.TargetType,
		&i.Status,
		&i.FourthDigit,
		&i.CustomerID,
		&i.Currency,
		&i.AccountTypeCode,
		&i.Amount,
		&i.IsFavorite,
	)
	return i, err
}

const getTargetAccountForUpdate = `-- name: GetTargetAccountForUpdate :one
SELECT id, name, atm_bank_code, bank_detail, account_type, account_number, bank, bank_branch, description, target_type, status, fourth_digit, customer_id, currency, account_type_code, amount, is_favorite FROM target_account
WHERE id = ? LIMIT 1
FOR UPDATE
`

func (q *Queries) GetTargetAccountForUpdate(ctx context.Context, id int64) (TargetAccount, error) {
	row := q.db.QueryRowContext(ctx, getTargetAccountForUpdate, id)
	var i TargetAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AtmBankCode,
		&i.BankDetail,
		&i.AccountType,
		&i.AccountNumber,
		&i.Bank,
		&i.BankBranch,
		&i.Description,
		&i.TargetType,
		&i.Status,
		&i.FourthDigit,
		&i.CustomerID,
		&i.Currency,
		&i.AccountTypeCode,
		&i.Amount,
		&i.IsFavorite,
	)
	return i, err
}

const listTargetAccount = `-- name: ListTargetAccount :many
SELECT id, name, atm_bank_code, bank_detail, account_type, account_number, bank, bank_branch, description, target_type, status, fourth_digit, customer_id, currency, account_type_code, amount, is_favorite FROM target_account
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListTargetAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTargetAccount(ctx context.Context, arg ListTargetAccountParams) ([]TargetAccount, error) {
	rows, err := q.db.QueryContext(ctx, listTargetAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TargetAccount{}
	for rows.Next() {
		var i TargetAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AtmBankCode,
			&i.BankDetail,
			&i.AccountType,
			&i.AccountNumber,
			&i.Bank,
			&i.BankBranch,
			&i.Description,
			&i.TargetType,
			&i.Status,
			&i.FourthDigit,
			&i.CustomerID,
			&i.Currency,
			&i.AccountTypeCode,
			&i.Amount,
			&i.IsFavorite,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTargetAccount = `-- name: UpdateTargetAccount :execresult
UPDATE target_account
SET description = ?
WHERE id = ?
`

type UpdateTargetAccountParams struct {
	Description sql.NullString `json:"description"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateTargetAccount(ctx context.Context, arg UpdateTargetAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateTargetAccount, arg.Description, arg.ID)
}
